//
//  QSBookCommentInteractor.swift
//  zhuishushenqi
//
//  Created caonongyun on 2017/4/24.
//  Copyright © 2017年 QS. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import QSNetwork

class QSBookCommentInteractor: QSBookCommentInteractorProtocol {

    var output: QSBookCommentInteractorOutputProtocol?
    
    var model:BookComment!
    var hotComments:[BookCommentDetail] = []
    var normalComments:[BookCommentDetail] = []
    var start:Int = 0
    var commentType:QSBookCommentType = .normal
    private var limit:Int = 1000
    private var param:[String:Any]?
    fileprivate var readerModel:BookComment?
    fileprivate var hotModel:QSHotModel?
    
    func requestHot(){
        //http://api.zhuishushenqi.com/post/530a26522852d5280e04c19c/comment/best
        let best = "\(BASEURL)/post/\(model._id)/comment/best"
        QSNetwork.request(best) { (response) in
            if let books = response.json?.object(forKey: "comments")  {
                do{
                    let magicComments =  try XYCBaseModel.model(withModleClass: BookCommentDetail.self, withJsArray:books as! [AnyObject]) as? [BookCommentDetail]
                    if let hot = magicComments{
                        self.hotComments = hot
                        self.output?.fetchHotSuccess(hots: self.hotComments)
                    }else{
                        self.output?.fetchHotFailed()
                    }
                }catch{
                    self.output?.fetchHotFailed()
                }
            }else{
                self.output?.fetchHotFailed()
            }
        }
    }
    
    func requestNormal(){
        let comment = getCommentURL(type: .normal)
        QSNetwork.request(comment, method: HTTPMethodType.get, parameters: self.param, headers: nil) { (response) in
            if let books = response.json?.object(forKey: "comments")  {
                do{
                    let modes = try XYCBaseModel.model(withModleClass: BookCommentDetail.self, withJsArray:books as! [AnyObject]) as? [BookCommentDetail]
                    if let normals = modes {
                        self.normalComments.append(contentsOf: normals)
                        self.output?.fetchNormalSuccess(normals: self.normalComments)
                    }else{
                        self.output?.fetchNormalFailed()
                    }
                }catch{
                    self.output?.fetchNormalFailed()
                }
            }else{
                self.output?.fetchNormalFailed()
            }
        }
        start += 50
    }

    func requestDetail(){
        let urlString = self.getDetailURL(type: .normal)
        QSNetwork.request(urlString, method: HTTPMethodType.get, parameters: nil, headers: nil) { (response) in
            QSLog(response.json)
            if let reader = response.json?.object(forKey: "review") {
                let detail:BookComment? = BookComment.model(with: reader as! [AnyHashable : Any])
                if let model = detail {
                    self.output?.fetchDetailSuccess(detail: model)
                }else{
                    self.output?.fetchDetailFailed()
                }
            }else{
                self.output?.fetchDetailFailed()
            }
        }
    }
    
    func getCommentURL(type:QSBookCommentType)->String{
        var urlString = ""
        switch type {
        case .normal:
            //        http://api.zhuishushenqi.com/post/review/530a26522852d5280e04c19c/comment?start=0&limit=50
            urlString = "\(BASEURL)/post/review/\(model._id)/comment"
            param = ["start":"\(start)","limit":"\(self.limit)"]
            break
        case .hotUser:
            //            http://api.zhuishushenqi.com/user/twitter/58d14859d0693ae736034619/comments
            urlString = "\(BASEURL)/user/twitter/\(model._id)/comments"
            param = nil
            break
        case .hotPost:
            //            http://api.zhuishushenqi.com/post/58d1d313bd7cc9961f93192d/comment?start=0&limit=50
            urlString = "\(BASEURL)/post/\(model._id)/comment"
            param = ["start":"\(start)","limit":"\(self.limit)"]
            break
        }
        return urlString
    }
    
    func getDetailURL(type:QSBookCommentType)->String{
        var urlString = ""
        switch type {
        case .normal:
            urlString = "\(BASEURL)/post/review/\(model._id)"
            break
        case .hotUser:
            urlString = "\(BASEURL)/user/twitter/\(model._id)"
            break
        case .hotPost:
            //            http://api.zhuishushenqi.com/post/58d1d313bd7cc9961f93192d/comment?start=0&limit=50
            urlString = "\(BASEURL)/post/\(model._id)"
            break
        }
        return urlString
    }

}
