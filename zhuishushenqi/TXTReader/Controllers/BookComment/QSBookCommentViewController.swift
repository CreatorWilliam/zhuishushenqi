//
//  QSBookCommentViewController.swift
//  zhuishushenqi
//
//  Created caonongyun on 2017/4/24.
//  Copyright © 2017年 QS. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import QSPullToRefresh

class QSBookCommentViewController: BaseViewController,UITableViewDataSource,UITableViewDelegate, QSBookCommentViewProtocol {

	var presenter: QSBookCommentPresenterProtocol?

    var model:BookComment?
    var hotComments:[BookCommentDetail]? = [BookCommentDetail]()
    var normalComments:[BookCommentDetail]? = [BookCommentDetail]()
    var detail:BookComment?
    
    fileprivate lazy var tableView:UITableView = {
        let tableView = UITableView(frame: CGRect(x: 0, y: 64, width: ScreenWidth, height: ScreenHeight - 64), style: .grouped)
        tableView.dataSource = self
        tableView.delegate = self
        tableView.sectionHeaderHeight = 60
        tableView.sectionFooterHeight = CGFloat.leastNonzeroMagnitude
        tableView.estimatedRowHeight = 180
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.qs_registerCellNib(BookCommentCell.self)
        tableView.qs_registerCellNib(UserfulCell.self)

//        tableView.qs_registerCellNib(BookCommentViewCell.self)
        tableView.qs_registerCellNib(BookCommentViewCell.self)
        let refresh = PullToRefresh(height: 30, position: .bottom, tip: "正在加载更多")
        tableView.addPullToRefresh(refresh, action: {
            self.presenter?.requestMore()
        })
        return tableView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "精华书评"
        let rightBtn = UIButton(type: .custom)
        rightBtn.addTarget(self, action: #selector(jump(btn:)), for: .touchUpInside)
        //        rightBtn.setImage(UIImage(named:"actionbar_close"), for: .normal)
        rightBtn.setTitle("去底部", for: .normal)
        rightBtn.setTitleColor(UIColor.red, for: .normal)
        rightBtn.frame = CGRect(x: self.view.bounds.width - 75, y: 7, width: 60, height: 30)
        let rightBar = UIBarButtonItem(customView: rightBtn)
        self.navigationItem.rightBarButtonItem = rightBar
        presenter?.viewDidLoad()
        view.addSubview(tableView)
    }
    
    @objc func jump(btn:UIButton){
        var section = 2
        var row = 0
        if (self.hotComments?.count ?? 0)  > 0  {
            section = 3
        }
        if (self.normalComments?.count ?? 0) > 0 {
            row = (self.normalComments?.count ?? 1) - 1
        }
        let indexPath = IndexPath(row: row, section: section)
        self.tableView.scrollToRow(at: indexPath, at: .bottom, animated: true)
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        var sections = 4
        if (self.hotComments?.count ?? 0) == 0 {
            sections = 3
        }
        if (self.normalComments?.count ?? 0) == 0 {
            sections = 2
        }
        return sections
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 2 {
            return (self.hotComments?.count ?? 0)
        }else if section == 3{
            return (self.normalComments?.count ?? 0)
        }
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = cellAt(indexPath: indexPath)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.section == 0 {
            let height = BookCommentCell.height(model: detail)
            return height
        }else if indexPath.section == 1 {
            return 91
        }else {
            return UITableViewAutomaticDimension
//            var height:CGFloat = 130
//            if (hotComments?.count ?? 0) > 0 {
//                if indexPath.section == 2 {
//                    if let model = self.hotComments?[indexPath.row] {
//                        height = BookCommentViewCell.cellHeight(model: model)
//                    }
//                }else{
//                    if let model = self.normalComments?[indexPath.row] {
//                        height = BookCommentViewCell.cellHeight(model: model)
//                    }
//                }
//            }else {
//                if let model = self.normalComments?[indexPath.row]{
//                    height = BookCommentViewCell.cellHeight(model: model)
//                }
//            }
//            return height
//            var height:CGFloat = 130
//            if (hotComments?.count ?? 0) > 0 {
//                if indexPath.section == 2 {
//                    if let model = self.hotComments?[indexPath.row] {
//                        height = BookCommentViewCell.cellHeight(model: model)
//                    }
//                }else{
//                    if let model = self.normalComments?[indexPath.row] {
//                        height = BookCommentViewCell.cellHeight(model: model)
//                    }
//                }
//            }else {
//                if let model = self.normalComments?[indexPath.row]{
//                    height = BookCommentViewCell.cellHeight(model: model)
//                }
//            }
//            return height
        }
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if section > 0 {
            return tableView.sectionHeaderHeight
        }
        return CGFloat.leastNonzeroMagnitude
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return tableView.sectionFooterHeight
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        if section > 0 {
            let headerTitles = ["这个书评是否对你有用","仰望神评论","\(self.detail?.commentCount ?? 0)条评论"]
            let headerView = UIView()
            let headerLabel = UILabel()
            headerLabel.frame = CGRect(x: 15, y: 30, width: self.view.bounds.width - 30, height: 30)
            headerLabel.text = headerTitles[section - 1]
            headerLabel.textColor = UIColor.darkGray
            headerLabel.font = UIFont.systemFont(ofSize: 13)
            headerView.addSubview(headerLabel)
            return headerView
        }
        return nil
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func cellAt(indexPath:IndexPath) -> UITableViewCell {
        
        if indexPath.section ==  0{
            let cell:BookCommentCell? = tableView.qs_dequeueReusableCell(BookCommentCell.self)
            cell?.backgroundColor = UIColor.white
            cell?.selectionStyle = .none
            cell?.model = detail
            return cell!
        }else if indexPath.section == 1{
            let cell:UserfulCell? = tableView.qs_dequeueReusableCell(UserfulCell.self)
            cell?.backgroundColor = UIColor.white
            cell?.selectionStyle = .none
            cell?.model = detail
            return cell!
        }else {
//            let cell:BookCommentViewCell? = tableView.qs_dequeueReusableCell(BookCommentViewCell.self)
            let cell:BookCommentViewCell? = tableView.qs_dequeueReusableCell(BookCommentViewCell.self)
            
            cell?.backgroundColor = UIColor.white
            cell?.selectionStyle = .none
            let types = [CommentType.magical,CommentType.normal]
            cell?.type = .normal
            if (self.hotComments?.count ?? 0) > 0 {
                if indexPath.section == 2 {
                    cell?.type = types[indexPath.section - 2]
                    if let model = self.hotComments?[indexPath.row]{
                        cell?.bind(model: model)
                    }
//                    cell?.model = self.hotComments?[indexPath.row]
                }else{
                    if let model = self.normalComments?[indexPath.row]{
                        cell?.bind(model: model)
                    }
//                    cell?.model = self.normalComments?[indexPath.row]
                }
            }else{
                if let model = self.hotComments?[indexPath.row]{
                    cell?.bind(model: model)
                }
//                cell?.model = self.normalComments?[indexPath.row]
            }
            return cell!
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let vc = UIStoryboard(name: "TXTReader", bundle: nil).instantiateInitialViewController()
        present(vc!, animated: true, completion: nil)
    }
    
    func showDetail(detail: BookComment) {
        self.detail = detail
        self.tableView.reloadData()
    }
    
    func showHot(hots: [BookCommentDetail]) {
        self.hotComments = hots
        self.tableView.reloadData()
    }
    
    func showNormal(normals: [BookCommentDetail]) {
        self.normalComments = normals
        self.tableView.reloadData()
    }
    
    func showEmpty() {
        
    }
}
