//
//  QSBookDetailInteractor.swift
//  zhuishushenqi
//
//  Created Nory Cao on 2017/4/13.
//  Copyright © 2017年 QS. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import QSNetwork

class QSBookDetailInteractor: QSBookDetailInteractorProtocol {

    var output: QSBookDetailInteractorOutputProtocol!
    
    var bookDetail:BookDetail!
    var hotComment:[BookComment] = []
    var bookList:[QSBookList] = []
    var recList:[Book] = []
    
    func requestData(id:String){
        let api = QSAPI.book(key: id)
        QSNetwork.request(api.path, method: HTTPMethodType.get, parameters: nil, headers: nil) { (response) in
            if let json = response.json as? [AnyHashable : Any]{
                self.bookDetail = BookDetail.model(with: json)
                self.requestHot(id: id)
            }else{
                self.output.fetchRankFailed()
            }
        }
    }
    
    func requestHot(id:String){
        let api = QSAPI.bookHot(key: id)
        QSNetwork.request(api.path) { (response) in
            do{
                if let json = response.json?["reviews"] as? [Any] {
                    let hot = try XYCBaseModel.model(withModleClass: BookComment.self, withJsArray: json) as? [BookComment]
                    self.hotComment = hot ?? []
                    self.output.fetchBookSuccess(bookDetail:self.bookDetail,ranks: self.hotComment)
                }else{
                    self.output.fetchRankFailed()
                }
            }catch{
                self.output.fetchRankFailed()
            }
        }
    }
    
    func requestAllChapters(withUrl url:String,param:[String:Any]){
        //先查询书籍来源，根据来源返回的id再查询所有章节
        QSNetwork.request(url, method: HTTPMethodType.get, parameters: param, headers: nil) { (response) in
            var res:[ResourceModel]? = [ResourceModel]()
            if let resources = response.json  {
                do{
                    res = try XYCBaseModel.model(withModleClass: ResourceModel.self, withJsArray: resources as! [Any]) as? [ResourceModel]
                    if let resource = res {
                        self.output.fetchAllChapterSuccess(bookDetail: self.bookDetail, res: resource)
                    }else{
                        self.output.fetchAllChapterFailed()
                    }
                }catch{
                    QSLog(error)
                    self.output.fetchAllChapterFailed()
                }
            }
            else {
                self.output.fetchAllChapterFailed()
            }
        }
    }
    
    func requestRecommend(){
//        http://api.zhuishushenqi.com/book/51d11e782de6405c45000068/recommend
        let url = "\(BASEURL)/book/\(bookDetail._id)/recommend"
        QSNetwork.request(url) { (response) in
            let books = response.json?["books"] as? NSArray
            if let bookList = books {
                do{
                    let bookList = try XYCBaseModel.model(withModleClass: Book.self, withJsArray: bookList as! [Any]) as? [Book]
                    if let booksList = bookList {
                        self.recList = booksList
                        self.output.fetchRecommendSuccess(books: booksList)
                    }else{
                        self.output.fetchRecommendFailed()
                    }
                }catch{
                    QSLog(error)
                    self.output.fetchRecommendFailed()
                }
            }else{
                self.output.fetchRecommendFailed()
            }
        }
    }
    
    func requestRecList(){
//        http://api.zhuishushenqi.com/book-list/51d11e782de6405c45000068/recommend?limit=3
        let url = "\(BASEURL)/book-list/\(bookDetail._id)/recommend?limit=3"
        QSNetwork.request(url) { (response) in
            let books = response.json?["booklists"] as? NSArray
            if let bookList = books {
                do{
                    let bookList = try XYCBaseModel.model(withModleClass: QSBookList.self, withJsArray: bookList as! [Any]) as? [QSBookList]
                    if let booksList = bookList {
                        self.bookList = booksList
                        self.output.fetchRecBookSuccess(books: booksList)
                    }else{
                        self.output.fetchRecBookFailed()
                    }
                }catch{
                    QSLog(error)
                    self.output.fetchRecBookFailed()
                }
            }else{
                self.output.fetchRecBookFailed()
            }
        }
    }
    
    func showTopic(index:Int){
        if self.bookList.count > index {
            self.output.showTopic(model: self.bookList[index])
        }
    }
    
    func showBookDetail(tag:Int){
        if tag >= 4 {
            // 可能感兴趣
            self.output.showInterestedView(recList: self.recList)
            return
        }
        if self.recList.count > tag{
            self.output.showBookDetail(model: self.recList[tag])
        }
    }
    
    func showCommunity(){
        self.output.showCommunity(model: bookDetail)
    }

}
