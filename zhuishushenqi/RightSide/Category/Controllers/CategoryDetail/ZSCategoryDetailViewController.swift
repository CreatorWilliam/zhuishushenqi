//
//  QSCategoryDetailViewController.swift
//  zhuishushenqi
//
//  Created caonongyun on 2017/4/20.
//  Copyright © 2017年 QS. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ZSCatelogDetailViewController:BaseViewController {

    var segmentViewController = ZSSegmenuViewController()
    var parameterModel:ZSCatelogParameterModel?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupSubviews()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        segmentViewController.view.frame = view.bounds
    }
    
    func setupSubviews(){
        title = parameterModel?.major ?? ""
        segmentViewController.delegate = self
        view.addSubview(segmentViewController.view)
        addChild(segmentViewController)
    }
}

extension ZSCatelogDetailViewController:ZSSegmenuProtocol {
    func viewControllersForSegmenu(_ segmenu: ZSSegmenuViewController) -> [UIViewController] {
        var viewControllers:[UIViewController] = []
        let titles = ["新书","热度","口碑","完结"]
        let types = ["new","hot","reputation","over"]
        for i in 0..<titles.count {
            let viewController = ZSCatelogItemViewController()
            viewController.viewModel.segmentIndex = i
            viewController.viewModel.title = titles[i]
            viewController.viewModel.type = types[i]
            viewController.title = titles[i]
            viewController.viewModel.parameterModel = parameterModel
            viewController.clickRow = { (book) in
                self.navigationController?.pushViewController(QSBookDetailRouter.createModule(id: book?._id ?? ""), animated: true)
            }
            viewControllers.append(viewController)
        }
        return viewControllers
    }
    
    func segmenu(_ segmenu: ZSSegmenuViewController, didSelectSegAt index: Int) {
        
    }
    
    func segmenu(_ segmenu: ZSSegmenuViewController, didScrollToSegAt index: Int) {
        
    }
}

class QSCategoryDetailViewController: BaseViewController ,SegMenuDelegate, QSCategoryDetailViewProtocol,UIScrollViewDelegate {

	var presenter: QSCategoryDetailPresenterProtocol?
    
    var subviews:[UIViewController] = []
    var selectedIndex:Int = 0
    var segView:SegMenu!
    
    private lazy var collectionView:UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.itemSize = CGSize(width: ScreenWidth, height: ScreenHeight - 104)
        layout.minimumLineSpacing = 0.01
        layout.minimumInteritemSpacing = 0.01
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: CGRect(x: 0, y: 104, width: ScreenWidth, height: ScreenHeight - 104), collectionViewLayout: layout)
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.backgroundColor = UIColor.clear
        collectionView.isPagingEnabled = true
        collectionView.qs_registerCellClass(UICollectionViewCell.self)
        return collectionView
    }()
    
    var segmentView:SegMenu!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "主题书单"
        self.automaticallyAdjustsScrollViewInsets = false
        self.setupSubview(titles: ["新书","热度","口碑","完结"])
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        layoutSubview()
    }
    
    override func viewWillLayoutSubviews() {
        layoutSubview()
    }
    
    private func layoutSubview() {
        
        segView.snp.remakeConstraints { (make) in
            let statusHeight = UIApplication.shared.statusBarFrame.height
            let navHeight = self.navigationController?.navigationBar.height ?? 0
            make.top.equalToSuperview().offset(statusHeight + navHeight)
            make.left.right.equalToSuperview()
            make.height.equalTo(40)
        }
        
        collectionView.snp.remakeConstraints { (make) in
            make.left.bottom.right.equalToSuperview()
            make.top.equalTo(segView.snp.bottom)
        }
    }
    
    func setupSubview(titles:[String]){
        segView = SegMenu(frame: CGRect(x: 0, y: 64, width: UIScreen.main.bounds.size.width, height: 40), WithTitles: titles)
        segView.menuDelegate = self
        self.segmentView = segView
        view.addSubview(segView)
        view.addSubview(collectionView)
        subviews = self.presenter?.setupSegview() ?? []
        /* 延迟加载
        subviews.forEach { (subVC) in
            self.addChildViewController(subVC)
            subVC.didMove(toParentViewController: self)
            subVC.view.frame = CGRect(x: 0, y: 0, width: ScreenWidth, height: ScreenHeight - 104)
        }
        */
    }
    
    func didSelectAtIndex(_ index:Int){
        selectedIndex = index
        self.collectionView.scrollToItem(at: IndexPath(item: index, section: 0), at: .centeredHorizontally, animated: true)
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        
    }
    
    func removeSubviews(parentView:UIView){
        for subview in parentView.subviews{
            subview.removeFromSuperview()
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}

extension QSCategoryDetailViewController:UICollectionViewDataSource,UICollectionViewDelegate{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int{
        return subviews.count
    }
    
    // The cell that is returned must be retrieved from a call to -dequeueReusableCellWithReuseIdentifier:forIndexPath:
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell{
        let cell = collectionView.qs_dequeueReusableCell(UICollectionViewCell.self, for: indexPath)
        self.removeSubviews(parentView: cell.contentView)
        let subVC = subviews[indexPath.item]
        self.addChild(subVC)
        subVC.didMove(toParent: self)
        subVC.view.frame = CGRect(x: 0, y: 0, width: ScreenWidth, height: ScreenHeight - kNavgationBarHeight)
        cell.contentView.addSubview(subVC.view)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
    }
}
