//
//  QSSearchViewController.swift
//  zhuishushenqi
//
//  Created Nory Cao on 2017/4/10.
//  Copyright © 2017年 QS. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RxCocoa
import RxSwift
import Then

class ZSSearchViewController: ZSBaseTableViewController {
    
    fileprivate let searchBarHeight:CGFloat = 56
    var searchViewModel:ZSSearchViewModel = ZSSearchViewModel()
    fileprivate var searchHeaderView = ZSSearchHeaderView(frame:CGRect.zero).then { (header) in
    }
    fileprivate var historyHeaderView = QSHistoryHeaderView()
    fileprivate var resultViewController = ZSSearchResultViewController()
    fileprivate var autoCompleteController = ZSSearchAutoCompleteController()
    fileprivate var searchBackgroundView = UIView().then { (background) in
        background.isUserInteractionEnabled = true
    }
    fileprivate lazy var searchController:UISearchController = {
        let searchVC:UISearchController = UISearchController(searchResultsController: self.autoCompleteController)
        searchVC.searchBar.placeholder = "输入书名或作者名"
        searchVC.searchResultsUpdater = self.autoCompleteController
        searchVC.delegate = self
        searchVC.searchBar.delegate = self
        searchVC.dimsBackgroundDuringPresentation = false
        searchVC.hidesNavigationBarDuringPresentation = true
        searchVC.searchBar.sizeToFit()
        searchVC.searchBar.backgroundColor = UIColor(red: 0.84, green: 0.84, blue: 0.86, alpha: 1.0)
        searchVC.searchBar.barTintColor = UIColor.lightGray
        searchVC.searchBar.layer.borderColor = UIColor.white.cgColor
        return searchVC
    }()
    
    let dispose = DisposeBag()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "搜索"
        
        searchBackgroundView.addSubview(searchController.searchBar)
        searchBackgroundView.addSubview(searchHeaderView)
        searchHeaderView.rx.observe(CGFloat.self, "totalHeight").subscribe(onNext: { (height) in
            QSLog(height)
            self.searchHeaderView.snp.remakeConstraints { (make) in
                make.top.equalToSuperview().offset(self.searchBarHeight)
                make.left.right.equalToSuperview()
                make.height.equalTo(height!)
            }
            self.tableView.reloadData()
        }).disposed(by: dispose)
        searchHeaderView.change = {
            self.searchViewModel.newHotwords { (hotwords) in
                self.searchHeaderView.hotwords = hotwords ?? []
            }
        }
        searchHeaderView.hotwordClick = { text in
            self.searchController.searchBar.text = text
            self.searchBarSearchButtonClicked(self.searchController.searchBar)
        }
        searchViewModel.newHotwords { (hotwords) in
            self.searchHeaderView.hotwords = hotwords ?? []
        }
        
        tableView.qs_registerCellNib(QSHistoryCell.self)
        
        
        autoCompleteController.selectRow =  { (indexPath) in
            self.searchController.searchBar.text = self.autoCompleteController.books[indexPath.row]
            self.searchBarSearchButtonClicked(self.searchController.searchBar)
        }
        
        resultViewController.didSelectIndexPathAtRow = { (book) in
            self.navigationController?.pushViewController(QSBookDetailRouter.createModule(id: book?._id ?? ""), animated: true)
        }
        
        if self.searchViewModel.keywords != "" {
            self.searchController.searchBar.text = self.searchViewModel.keywords
            searchViewModel.fetchAutoComplete(key: searchController.searchBar.text ?? "") { (books) in
                self.autoCompleteController.books = books ?? []
                let indexPath = IndexPath(row: 0, section: 0)
                if self.autoCompleteController.books.count > 0 {
                    self.resultViewController.view.origin.y = self.searchBarHeight
                    self.resultViewController.view.size.height = ScreenHeight - self.searchBarHeight - kNavgationBarHeight
                    self.searchViewModel.addToHistory(history: self.searchController.searchBar.text ?? "")
                    self.view.addSubview(self.resultViewController.view)
                    self.searchViewModel.fetchBooks(key: self.searchController.searchBar.text ?? "", start: 0, limit: 50) { (books) in
                        self.resultViewController.books = books
                    }
                }
            }
        }
        self.automaticallyAdjustsScrollViewInsets = true

    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
    }
}

extension ZSSearchViewController:UISearchResultsUpdating,UISearchControllerDelegate,UISearchBarDelegate{
    
    //MARK: - UISearchBarDelegate
    func updateSearchResults(for searchController: UISearchController) {
        
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        
        self.resultViewController.view.origin.y = self.searchBarHeight
        self.resultViewController.view.size.height = ScreenHeight - self.searchBarHeight - kNavgationBarHeight
        searchViewModel.addToHistory(history: searchBar.text ?? "")
        self.view.addSubview(self.resultViewController.view)
        
        searchController.dismiss(animated: true) {
            // 完成后将搜索结果展示出来
            self.searchViewModel.fetchBooks(key: searchBar.text ?? "", start: 0, limit: 50) { (books) in
                self.resultViewController.books = books
            }
        }
    } // called when keyboard search button pressed
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        
    } // called when cancel button pressed

    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        
    } // called when text ends editing

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchViewModel.fetchAutoComplete(key: searchText) { (books) in
            self.autoCompleteController.books = books ?? []
        }
    }
    
    //MARK: - UISearchControllerDelegate
    func willPresentSearchController(_ searchController: UISearchController) {
        resultViewController.view.removeFromSuperview()
        searchViewModel.fetchAutoComplete(key: searchController.searchBar.text ?? "") { (books) in
            self.autoCompleteController.books = books ?? []
        }
    }
    
    func didPresentSearchController(_ searchController: UISearchController) {
//        let indexPath = IndexPath(row: 0, section: 0)
//
//        if indexPath.row < self.autoCompleteController.books.count {
//            self.searchController.searchBar.text = self.autoCompleteController.books[indexPath.row]
//            self.searchBarSearchButtonClicked(self.searchController.searchBar)
//        }
    }
    
    func willDismissSearchController(_ searchController: UISearchController) {
        
    }
    
    func didDismissSearchController(_ searchController: UISearchController) {
        
    }
    
    func presentSearchController(_ searchController: UISearchController) {
        
    }
}

extension ZSSearchViewController{
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 {
            return 0
        }
        return searchViewModel.fetchHistoryList(nil)?.count ?? 0
    }
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        if section == 0 {
            return searchBackgroundView
        }
        return historyHeaderView
    }
    
    override func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView()
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.qs_dequeueReusableCell(QSHistoryCell.self)
        if indexPath.section > 0 {
            if let list = searchViewModel.fetchHistoryList(nil) {
                cell?.titleLabel?.text = list[indexPath.row]
            }
        }
        return cell!
    }
    
    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if section == 0 {
            return searchBarHeight + searchHeaderView.totalHeight
        }
        return 42
    }
    
    override func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 0.01
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 44
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        if let list = searchViewModel.fetchHistoryList(nil) {
            searchController.searchBar.text = list[indexPath.row]
            self.searchBarSearchButtonClicked(searchController.searchBar)
        }
    }
}

class QSSearchViewController: ZSBaseTableViewController{

    var presenter: QSSearchPresenterProtocol?

    var hotWords = [String]() {
        didSet{
            tableView.reloadData()
        }
    }
    var searchList:[[String]] = []
    var searchWords:String = ""
    var books = [Book]()
    var headerView:QSSearchHeaderView!
    var historyHeader:QSHistoryHeaderView!
    var resultTableView:QSSearchResultTable!
    var autoCompleteTable:QSSearchAutoCompleteTable!
    
    // new
    var searchHeaderView:ZSSearchHeaderView = ZSSearchHeaderView().then {
        $0
    }

    lazy var searchController:UISearchController = {
        let searchVC:UISearchController = UISearchController(searchResultsController: nil)
        searchVC.searchBar.placeholder = "输入书名或作者名"
        searchVC.searchResultsUpdater = self
        searchVC.delegate = self
        searchVC.searchBar.delegate = self
        searchVC.hidesNavigationBarDuringPresentation = true
        searchVC.searchBar.sizeToFit()
        searchVC.searchBar.backgroundColor = UIColor(red: 0.84, green: 0.84, blue: 0.86, alpha: 1.0)
        searchVC.searchBar.barTintColor = UIColor.white
        searchVC.searchBar.layer.borderColor = UIColor.white.cgColor
        return searchVC
    }()

    override init(style: UITableView.Style) {
        super.init(style: .grouped)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        initSubview()
        self.presenter?.viewDidLoad()
    }

    func initSubview(){
        tableView.qs_registerCellNib(QSHistoryCell.self)
    }
}

extension QSSearchViewController{
    //MARK: - tableView
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchList[section].count
    }

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:QSHistoryCell? = tableView.qs_dequeueReusableCell(QSHistoryCell.self)
        cell?.backgroundColor = UIColor.white
        cell?.selectionStyle = .none
        cell?.titleLabel.text = searchList[indexPath.section][indexPath.row]
        return cell!
    }

    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {

        let headerView = UIView()
        headerView.backgroundColor = UIColor(red: 0.94, green: 0.94, blue: 0.96, alpha: 1.0)
        headerView.addSubview(self.searchController.searchBar)
        headerView.addSubview(self.headerView)
        headerView.addSubview(self.historyHeader)
//        self.headerView.hotwords = self.hotWords
        return headerView
    }

    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 256
    }

    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.presenter?.didSelectHistoryRow(indexPath: indexPath)
    }
}

extension QSSearchViewController:QSSearchViewProtocol{
    func showNoHotwordsView(){

    }

    func showHotwordsData(hotwords:[String]){
        self.hotWords = hotwords
        self.tableView.reloadData()
    }

    func showNoHistoryView(){

    }

    func showSearchListData(searchList:[[String]]){
        self.searchList = searchList
        self.tableView.reloadData()
    }

    func showBooks(books: [Book],key:String) {
        self.books = books
        self.resultTableView.books = self.books
        showResultTable(key:key)
    }

    func showAutoComplete(keywords: [String]) {
        self.autoCompleteTable.books = keywords
        showAutoComplete()
    }
}
